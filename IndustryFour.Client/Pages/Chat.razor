@page "/"
@page "/chat"
@using LangChain.Providers.OpenAI.Predefined

<PageTitle>Playground Chat</PageTitle>

<div class="container mt-4">
    <h1>OpenAI Chat</h1>
    <form id="chatgpt-form">
        <div class="mb-3">
            <label for="openai-key" class="form-label">Enter your API key:</label>
            <input type="text" class="form-control mb-4 m-auto" id="openai-key" @bind="Key" placeholder="sk-yourkeyhere" />
        </div>
        <div class="mb-3">
            <label for="chatgpt-prompt" class="form-label">Enter your prompt:</label>
            <input type="text" class="form-control mb-4 m-auto" id="chatgpt-prompt" @bind="Prompt"/>
        </div>
        <button type="button" class="btn btn-success" disabled="@IsTaskRunning" @onclick="Click">Submit</button>
    </form>
    <div class="mt-4" id="chatgpt-result">
        @if (Response is not null || Error is not null)
        {
            <p style="white-space: pre-line">@Response</p>
            <pre>@Error</pre>
        }
    </div>
</div>

@code
{
    private string Key { get; set; }
    private string Prompt { get; set; } = "What are 5 good names for a colorful sock company?";
    private string Error { get; set; }
    private string Response { get; set; }
    private bool IsTaskRunning { get; set; }

    private async Task Click()
    {
        IsTaskRunning = true;
        Response = "Processing...";
        Error = null;

        // Forces a render
        await Task.Delay(1);

        await OnPromptSubmitted();

        IsTaskRunning = false;
    }

    private async Task OnPromptSubmitted()
    {
        try
        {
            var model = new Gpt4Model(Key);
            var result = await model.GenerateAsync(Prompt);
            Response = result.LastMessageContent;
        }
        catch (Exception ex)
        {
            Error = ex.ToString();
        }
    }
}