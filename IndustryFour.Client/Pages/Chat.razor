@page "/chat"
@inject HttpClient HttpClient

<PageTitle>Industry 4.0 - Chat</PageTitle>

<h1>Chat</h1>
<form id="input-form">
    <div class="mb-3">
        <label for="input-prompt" class="form-label">Enter your prompt:</label>
        <input type="text" class="form-control mb-4 m-auto" id="input-prompt" @bind="Question" />
    </div>
    <button type="button" class="btn btn-success" disabled="@IsTaskRunning" @onclick="Click">Submit</button>
</form>
<div class="mt-4" id="input-result">
    @if (Answer is not null || Error is not null)
    {
        <p style="white-space: pre-line">@Answer</p>
        <pre>@Error</pre>
    }
</div>

@code
{
    private string Key { get; set; }
    private string Question { get; set; } = "What is the automation stack?";
    private string Error { get; set; }
    private string Answer { get; set; }
    private bool IsTaskRunning { get; set; }

    private async Task Click()
    {
        IsTaskRunning = true;
        Answer = "Processing...";
        Error = null;

        // Forces a render
        await Task.Delay(1);

        await OnPromptSubmitted();

        IsTaskRunning = false;
    }

    private async Task OnPromptSubmitted()
    {
        try
        {
            KeyValuePair<string, string> pair = new KeyValuePair<string, string>("question", Question);

            var response = await HttpClient.GetAsync($"chat/question?question={Question}");
            if (response.IsSuccessStatusCode)
            {
                Answer = await response.Content.ReadAsStringAsync();    
            }
            else
            {

                Answer = null;
                Error = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Error = ex.ToString();
        }
    }
}