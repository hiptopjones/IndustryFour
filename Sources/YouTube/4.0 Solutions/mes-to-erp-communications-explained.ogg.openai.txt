Then we're using a connector to ERP, and we're converting topical namespaces in ERP to a namespace here. Alright, Discord question number one. Yes. Related to, this is related to the MES Whiteboard video. Yeah, so Akos, I'm assuming that's his name, on Discord asked, MES to ERP communications, how do they differ between Industry 3.0 and Industry 4.0? And are there open source solutions to MES? MES or ERP? To MES. Got it, okay. Alright, so I'm going to start with, the question is, MES to ERP communication, how do they differ in Industry 3.0 and Industry 4.0? Alright, so I'm going to start there. Alright, so in the Industry 3.0 world, the former way of doing, or the typical linear way of integrating ERP to MES looks something like this. So at the ERP layer, what we have is our master data model. So that's the, it's the structure of the business, it's how we organize the business, the enterprise, the business units, locations, inventory locations, all that kind of stuff. So it's the master data model, it is, and then it's definitions. So it'll be things like our products, it'll be our product codes, it'll be our bill of materials, it'll be our manufacturing steps. It's going to be all the things that define our business. That's what's in the ERP system. And as a manufacturing execution system, there are things from the ERP that I'm going to want. So if I've got my ERP layer here, my MES layer here, some of the things that I'm going to want is I'm going to want our product codes. So I'm going to want, and manufacturing execution systems, in order to be able to, let's say I wanted to do, I want to calculate OEE by product code. Well, I either have to define all my product codes in my MES system, or I have to go get them where they're already defined. So one of the things that I want is I want to list all my product codes. I want my work orders, and I want my schedule if my schedule lives in the ERP. Let's pick those three. There are many others that we might want, okay? But in this case, let's say I just want those three. The old way of integrating with the ERP system was that I would either hit an API. So let's say I have a REST API here that is not going to be read. Let's say if it's a REST API, let's say it is, we'll make that one green, okay? Because REST is REST is REST, I have to learn the API. I got to read the REST API documentation so I know which calls to make from the MES system so that I can call for product codes, work orders, and schedules. But this is all going to be trigger driven. So the MES is going to have to ask the question, and the ERP is going to have to give the answer through that REST interface. That's number one, okay? Number two is I may connect directly through a SQL database. So same thing. I'm going to use a SQL connector, so ODBC, JDBC, whatever it is, and I'm going to request from the MES system from the ERP system over SQL. But I also have to understand, I'll have to know how the tables are structured I literally have to know what I'm looking for. I have to know what I'm looking for and where it's located, okay? All right, and then the last way is a custom connector. So let's say I'm using a Wonderware MES, or I'm using FactoryTalk MES, and I'm talking to SAP, then I'm going to have a connector that is an extension of my manufacturing execution system, and it's going to do the same thing. It's going to request the things it wants, and the ERP system is going to reply through that connector. All right, here's the problem with doing it this way, okay? The problem with doing this way is that if I make a change here based on some piece of information, I add something else I want to use here. Let's say what I want to add is, let's do bill of materials for a product code. Now I want the bill of materials, and I want to include that in my manufacturing execution system. I have to make a change here. I got to make a change here in my call, and I got to make a change here. I may have to add support for bill of materials at all three points. That's the industry 3.0 way of doing it. The industry 4.0 way of doing it is, and it's really in two steps, so I'm going to do the legacy example. So what I've got is ERP. That's got the thing I care about. I've got MES. It's going to run our MES function, and then I have a unified namespace. And in this case, we'll do line, and then under line, what I'm going to have is an MES function, and then I'm going to have ERP function. And then I'm going to have ERP function. We won't call them MES and ERP, but for illustrative purposes, that's what we're going to call them. All right. Everything that is here is published from the manufacturing execution system, and everything that's here is published from the ERP system. And the way that we normally integrate is we will put together, we'll put a platform alongside the two of these. This is the way we initially integrate. Ideally, what you want is a manufacturing execution system that supports, in this case, we're using MQTT. We want to support MQTT out of the box, and we want to be able to say, we want to configure on the manufacturing execution side, hey, we want you to send MES information for line one to this location in the line namespace, and we want to be able to configure on the ERP side. We want you to send the ERP information, so that would be the product code, the list of product codes, or it could be if the MES has selected this work order, then put this value from the ERP for the product code in this location in the ERP namespace. We're going to use an IoT platform here that uses a connector to the ERP and a connector to the MES, or we're going to build the MES in the IoT platform natively, which is generally what we do. Then we're using a connector to ERP, and we're converting topical namespaces in ERP to a namespace here. Here's the big difference. When we make this connection here, so whether I'm doing this over REST, SQL, or some custom connector from our IoT platform, what we're doing is we're setting this up in a way where as the underlying data model in the ERP extends, our connection is automatically retrieving data, processing it, and putting it in the appropriate location in the namespace. Now the manufacturing execution system can just monitor the ERP namespace for changes, and it will be reported. I can set up a connection. I can set up a subscription to ERP within this line in my MES system, and if my ERP adds something like bill of materials as a new function in the ERP, BOM is going to show up here, and this subscriber will be notified that that BOM now exists. Then the only place we have to make a change is here. We don't have to make a change in our connector. We don't have to make a change in our subscription. As long as I'm subscribing to ERP wildcard, I'm going to get anything that's put into ERP. Okay, so the only place I'm making a change is on the consumption side. So that, in a nutshell, that's the way, that's the difference between how we're integrating ERP and MES industry 3.0 and how we're integrating ERP MES industry 4.0. Obviously, the advantage here is that both the ERP and the MES get full context. They're not limited to just what we're, the manual connection we're making between one layer and another. The ERP system has access to everything in our unified namespace, just like the MES does, and the only thing that we have to change is the subscription upon which, the things that we're subscribing for.