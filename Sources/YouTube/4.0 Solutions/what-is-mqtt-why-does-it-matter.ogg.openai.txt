All right, so in this video we're going to go over why MQTT matters. So we've already established what is an IoT protocol and what is MQTT and kind of how it's structured. But I'm going to go a little bit more into how MQTT works. So it's very simple. Basically a client, which could be our PLC and it speaks MQTT, connects to a broker and that broker is our server. In an old architecture we would have our OPC server, like say Kepware, running on a Windows 2008 R2 machine and we'd have to point Kepware to the PLC in the field. That isn't the way this works. The device gets pointed to the broker. That's very, very important. The device sends a birth certificate. The client sends a birth certificate to the broker and the broker stores that information. And then what happens is the client monitors its topics, and we call in MQTT lingo as a topic, but in industrial lingo it's tags. So the PLC monitors its tags and monitors the topics and publishes changes. So what happens is when a tag changes, the client, this is all client stuff, it monitors the tag and then it publishes the change to the broker. What does the broker do? The broker, it creates the namespace. Think of that as your tag structure. It stores the values. It keeps track of people who are subscribing to the data. Keeps track of subscribers. So how does that work? I could have a broker here running, you know, say I'm using the Mosquito or a Hive broker. I could be using Ignition or Chariot or I can, there's lots and lots of brokers out there. And I have a client out here that's publishing data in, okay, a PLC that's publishing data in, but that PLC could also subscribe to data that lives in the namespace. Or my MES system could subscribe to it. The MES connects to the broker and gets our tags. ERP subscribes to the broker and gets our tags. The SCADA system subscribes to the broker and gets our tags. But here's the real mind bender. The PLCs in our plant could also subscribe to the topics in the namespace and get data. So I could share data between equipment, non-process critical data, nonetheless, but I could still share data across equipment. So I could have three PLCs, three lines running, but my HMI could work for all three pieces of equipment through my broker without having an explicit connection between the equipment, but through the broker. The PLC becomes part of the ecosystem. The HMI is part of the ecosystem. It's a node in the ecosystem. It is not a static thing in the field. So what ends up happening is everything. And then like Azure, AWS, they all speak MQTT. So now all my entire stack is unified using an open protocol like MQTT. So this is why MQTT matters because now I can create everything we talked about in what is the digital factory, right? And what we're talking about is this connected stack. That's what you have here. This is the old way. The old way is we talk OPC, sometimes JDBC, ODBC, SQL, Modbus here. And it requires lots of engineering to get these things connected. Between the MES and ERP layer, we're talking APIs, we're talking SQL. Sometimes we're talking proprietary protocols. Again, money every time we connect something. For ERP to cloud, it's API only basically. Money every time we connect something. Here, you want to know when you spend money? When you ask your OEM to build you a new machine. Then you spend all your time developing here. Developing cost-saving functionality, cost-saving features, cost-saving reports, cost-saving alarm notifications. You spend all your capital in here. You don't spend it here connecting stuff, okay? That's why MQTT matters.