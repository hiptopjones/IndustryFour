What is MQTT? So MQTT fits into the conversation about IIoT. So in the previous videos, we talked about what is IIoT and why does it matter? And how that translates into digital transformation and creating a digital factory and why does a digital factory matter? Okay, so what we're gonna talk about is the protocol that is MQTT. In order for you to implement IIoT, you have to adopt an IIoT protocol. So the question is, what is an IIoT protocol? Let's start with that. Let's answer that. What qualifies as an IIoT protocol? So it's gonna be things like Ethernet IP, the industrial protocol. That would be a IIoT protocol. Why? The answer is, it's because I can take a piece of equipment and I can plug it into my network with other equipment and just by dropping in an IP address, I can be connected to anywhere within my network. That's an IIoT protocol. It's not a very smart IIoT protocol. It doesn't have the ability to allow you to publish tag data into namespaces and that kind of thing. But Ethernet IP is an IIoT protocol. But it has no specification related to it for industrial data. So the other IIoT protocols are DMP3. There's a bunch of them, so people will comment. MQTT, those are the two big ones. The question is, why do you use one or the other? So I'll answer the question about what is MQTT. It is an IIoT protocol with a specification for handling data. It is a report by exception protocol. This is very important. This is the most important part of the protocol. It is a report by exception protocol. It is a stateful protocol. What does that mean? It means that the server and the clients always know who they're connected to and they know that they are connected. It's stateful. It is lightweight. That's very important. The payloads are very, very small and it is incredibly flexible. What does that mean? It means that I can basically ship anything over the protocol. If I wanna ship images, I can. If I wanna stream video, I can. If I wanna send Word files, I can. If I wanna send a blob, I can. If I wanna send a JSON dictionary with just text information in it, I can. If I wanna send just an integer digit, I can. And it can be read and deciphered at the other end. So MQTT, I wanna just go through the things that it is. It's an IIoT protocol with a specification. So you can go to the Eclipse Foundation. The Eclipse Foundation managed the specification called Spark Plug B. All the Spark Plug B specification tells you is how to connect something in the field to an MQTT server. We call them brokers, an MQTT server, and how do you format the data in the payload so that it can be organized at the server. Report by exception. What that means is, is when I'm a MQTT client, so let's think of these as PLCs. For example, Easy Automation has the EasyLogix PLC, the EasyRack, that it supports both flat MQTT, that is, I can put anything in the payload that I'm gonna send, or Spark Plug B, which has a specification for how the data should be packaged and sent. So I've got four PLCs in the field, and I have one MQTT broker. The PLCs are going to send their data to the broker only when the data changes. So I've got 100 tags inside my PLC. Three of those tags change. The moment they change, the MQTT client publishes three tag changes into the namespace. The traditional way is a pull response method, right? OPC UA, which we'll see over here in a second. OPC UA, where my server makes a request to the PLC, and the PLC responds to the server. Then it moves to the next request. The advantage of IIoT protocols, specifically MQTT, is that MQTT publishes the changes to the broker. Only the things that change. Report by exception. Obviously what you can see is bandwidth is much lower, and it's much more efficient. The third part, stateful protocol. Basically what that means is there's always a connection here, and we always know what that connection is. We do that through what's known our birth and death certificates. So part of the MQTT protocol is that the client will publish a birth certificate to the server. That means that any person who goes to the server and takes a look at the information for that node will know when that node came online, how many times it's disconnected, and when was the most recent death certificate published, and when was the most recent birth certificate published. Very important, that's the stateful piece. It's lightweight. Basically the header's really, really small. It's two byte overhead, exactly. Very, very, very small overhead with MQTT. So what are the implications there? Basically in many of the applications that we've done, we have an example right now in Southwest Texas over a cellular connection, 275K of bandwidth. That's it, okay? We're talking 2G to 3G cellular. Really, really slow. We're able to send 875 tags every second. Every chain, 875 changes per second over MQTT because it's so small. And then flexible. Flexible means this, our payload can be standardized or not. I could have a structure for my payload or I could not. That's what makes it flexible. In another video later on, probably not in this set of videos, we'll do what is the difference between DMP3 and MQTT, disadvantages, advantages of the two. It starts with DMP3 is still a pole-based protocol. All right, and then I wanna talk a little bit about why MQTT matters, okay?