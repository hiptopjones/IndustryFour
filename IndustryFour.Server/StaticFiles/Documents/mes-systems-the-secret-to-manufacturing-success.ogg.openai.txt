why it is that companies ultimately choose to build their manufacturing execution system. Take zero. All right, so in this video, in this week's whiteboard video, which is a follow-up to the short we did on Monday, which is a follow-up to the many videos we've done on manufacturing execution systems, today what I'm going to go over is what are the technical reasons why manufacturers end up choosing to build their manufacturing execution system rather than buying it off the shelf. What are the technical reasons? Okay, so a little bit of background. So before we get started, a little bit of background. If you want to know what is manufacturing execution system, we shot a video about that about a year and a half ago. You'll be able to get it somewhere up here. It'll be linked. We shot videos on what is manufacturing execution, how to calculate OEE and why you need to. This is what you must know before you build your manufacturing execution system, and how to implement OEE in your manufacturing plant. That's just four of the better videos that we've shot on MES. I highly recommend you watch at a minimum the what is MES video. Okay, but a little bit of background. Okay, manufacturing execution systems, manufacturing execution system is essentially the place where we convert something we've sold in our ERP system into manufacturing. So if you look at our manufacturing workflow, okay, if you look at the manufacturing workflow, we sell stuff in our CRM. We plan to manufacture it in the ERP. The ERP is sort of the master data model for the business. It's the place where we store all the products that we sell, the definitions of those products, the manufacturing steps, the inventory, the raw material, all that kind of stuff. Okay, but ERP is really planning software. It isn't execution software. The manufacturing execution layer, the MES layer is the place where manufacturing actually takes place. Okay, it's the software you generally see on the plant floor or in the supervisor's office, actually on and okay. If you were to look at CRM, ERP, MES, SCADA, PLC, HMI, warehouse management system, shipping and ARP, and you were to, if we were to put this in terms of representative sizes, so that is which of these pieces of software are the biggest, okay, it's actually going to be manufacturing execution. In most organizations, and even if it's not software, let's say it's just paper execution, okay, the traveler, the work order, the barcode that we scan, the raw material, the sheet off the raw material from inventory, etc, etc, etc. Manufacturing execution is going to be the biggest of all of them. Okay, ERP is going to be huge, but it's sort of going to be the tip of a pyramid. And underneath that pyramid is going to be many instances of manufacturing execution systems in all of our sites. Okay, so manufacturing execution is absolutely the most critical piece of software you have in your business. There's no question about it. It's the most critical piece of software. Okay, so what we're going to be talking about today is why is it clients end up building their manufacturing execution system rather than buying it off the shelf. The way that most people start is they call Rockwell, and they say, we want Rockwell MES, or we want Wonderware MES. They go to Aviva, and they say they want Wonderware. They go to Siemens, and we say, Siemens, we want your MES software. They go to Traxxas, and they say, hey, Traxxas, we want your MES software. We go to PTC, and we say, hey, PTC, we want to use your manufacturing apps or your control apps for our manufacturing execution system. Okay, they generally start with off the shelf. And what they discover pretty quickly is that the cookie cutter software that they bought off the shelf doesn't fit their business. Okay, and today I'm going to explain why, the technical reasons why you end up building, all right. All right, so if what we want, let's first talk about what MES is. And if you look at the what is MES video, one of the things I talk about is the core four. Okay, so that is work order scheduling, overall equipment effectiveness, and downtime tracking. Those are basically the four capabilities that are in essentially every manufacturing execution system. Okay, and then there's a whole suite of other capabilities you're going to pick based on your business needs. For example, a really good one would be like recipe and formulation. Let's say I'm in a batch process, okay, and I'm mixing some type of batch in a tank. And then I'm going to a linear discrete process that's chopping that bulk thing up into smaller discrete components. The recipe that went into making that batch and the formulation, all the lot numbers and the individual items that went into making that batch are critical to the performance of the manufacturing later on downstream. But that doesn't always apply. That doesn't apply in every manufacturing process. So if I were to buy my MES system off the shelf and it wasn't specifically designed for batch processes, I would be shit out of luck if I wanted to be able to tie the recipe, the formulation, and the batch number to my downstream manufacturing operations. Okay, all right. But in general, customers want something like this. At the line level for the general operator, they want to be able to look at certain things. Okay, so the general operator wants to have insight into what we're running, our work orders. Okay, that's this upper left-hand corner here. In general, they want to have insight into how well we're running. Okay, and this is your OEE. This is OEE by run down to availability, performance, and quality, and this is OEE by shift. Then they want to have, maybe they want to have some insight into how the individual cells within this production line are running. So the same view here, except now we're looking at the subunit. So if this production line is made up of, say, four cells, what I want to be able to do is select between my four cells to see what these efficiency numbers are by individual cell. Okay, and then our downtime tracking. Okay, in general, we want to build something like this for our operators. Okay, and this is generally your line level dashboard. So this is visualization number one that we want to see. Visualization number two is we want insight for the supervisor. So a supervisor is going to be responsible for more than one production line. Generally, supervisors are in charge of an area in a manufacturing facility or many areas. In this case, we're going to say that this supervisor is only responsible for these four production lines. Okay, they want to look at the schedule and they want to look at the individual production lines. Then what we want is we want to be able to do analysis. Okay, so what we want to do is be able to predict, select a production line, and what we want to do is we want to look at what are the top 10 causes of downtime by our production line, by production line, and then by our individual cells. We want to be able to do analytics. Okay, and then we want to, from a supervisor level, we want to be able to look and see how did we run over the course of a shift. So all of our individual cells, our production lines, when were we running, when were you not running, what was our production relative to what we should have been producing, the dark blue bar is what we produced, the light blue bar is what we should have produced, actual versus target production, defects by individual cells. This is top five line downtime reasons, Pareto chart, and these are all the individual lists of downtime events. Okay, we want to build all those things. That's our core. What I just showed you there is your core four MES. Okay, so that's the core four. That's the thing that everyone wants in their manufacturing execution system. There's no additional features there. There's no recipe and formulation. There's no quality management. There's no batch tracking. There's no statistical process control. There's no statistical process analysis. There's none of the, there's no bomb-kitting. There's nothing special about what I just showed you. Okay, and yet you could not have built what I just showed you right there with an off-the-shelf solution for that specific customer. And that specific customer that I just showed you is an incredibly standardized manufacturing operation, and yet you still could not have built that manufacturing execution system with something off-the-shelf. What you needed to do was buy an IIoT platform, a software platform, and that's designed for the industrial internet of things. What is a platform that's designed for the industrial internet of things? It's a piece of software that can connect to industrial hardware and software. It has the connectors to connect to all those things, and then it's an environment for doing data operations, converting the individual events from all the things it's connected to into information, information modeling, and then dashboarding and analysis. That's what an IoT platform is. It generally has a scripting language. It generally has an engineering environment where you can build visualizations. So you want to take an IIoT platform, and you want to build your manufacturing execution system. But let's pause for just a second. Let's say if I was going to build an off-the-shelf MES system, how would I do it? Okay, so I would start by trying to build like every other software is built, okay? Backend, API, and UI. This is the part that the human being interacts with, okay? This API might have, we may have connectors here that connect out to our machines, okay? And the API installs events into the backend. How would I build a manufacturing execution system? Well, what I would do is I would basically create an ingress point, okay? Which let's say I'm going to create an object called a cell, and it's going to be in the shape of a triangle, okay? So I'm going to model what a cell is, and I'm going to put it in the shape of a triangle. I'm also going to model what a line is, and I'm going to put it in the shape of a square. And I'm going to model what an area is, and I'm going to put it in the shape of a circle, okay? So I'm going to have an information model in my backend, one for a cell, one for a line, and one for an area. I'm also going to write methods in my API, methods in my API that can call the triangle, call the square, or call the circle. And then I'm going to build visualizations that will display the cell, display the line, and display the circle. Now, that's all fine and dandy. When you're building software, when you're building software, this is what you want to do, okay? This is how software works. Here's the problem. Here's the problem. The problem is not in defining what a cell is, and the problem is not defining what a line is, and the problem is not defining what an area is. The problem is in defining the functions underneath the cell, functions like give me all downtime by minutes, give me OEE by cell, show me the availability over the last 30 minutes. In order for me to create these functions, what I need is standard data ingestion. I have to be able to model the data, the individual events, so that they can be ingested the way that that triangle is designed. The problem is, is that if I look at a manufacturing facility, a cell is not a cell is not a cell. The way a cell is structured here, this cell may have state, and it may have it may have a line state register. This one may have just a list of alarms. This one may have just it stopped or it's running. That's it, okay? So, what am I going to do? How do I take how do I normalize a cell that has a state register that is a number? If the number is 31, it means it's stopped for this reason. If the number is 44, it means it stopped for that reason. The number is zero, it means it's stopped. If it's one, it's running. That cell has that model. This cell just has a list of alarms. So, I could have 500 alarms, 31 of them are either active, 31 are active, and the rest are not. And this one just has a one or a zero. One means it's running, zero means it's stopped. Okay? Most of this software, in fact, nay, nearly all the software that comes off the shelf isn't going to work for all three of those machines. What you're going to have to do is make those machines fit the software. The way the software was designed, the MES system off the shelf was designed to consume the data. So, a really good example of how this works in practice, let's say that you call up, I'm trying to think of the companies that have, oh, there's a MES system called Plantformance. That is, I've been seeing it around, it's a French thing. That Plantformance MES system basically has an edge device. Okay? And that edge device is designed to essentially normalize that data. So, basically, if I'll put my edge device out on the plant floor, okay, and what that edge device is designed to do, it's designed to capture the stuff from the machine and format it the way the triangle, the cell, and the area needs to consume it, and the way the functions, go get the downtime for the cell, go get the OE for the cell, is designed to process it. I think Corso Systems does a similar thing. They have like a little box, right? And they put that box out there. That box is designed to do this thing in the red. Take the stuff from the machine and format it for the way their system is designed to consume it. Okay? That's problem one. Problem one is, is what happens once you install this appliance, or once you, once you integrate the software with these manual connections to our functions? Well, what happens if I want to make a change? I want to move a piece of machinery, Well, what happens if I want to make a change? I want to move a piece of machinery, for example, or I install a new piece of machinery, or I update an existing piece of machinery that breaks this. What do I do there? Okay? That's problem number one. But the bigger problem is, is since manufacturing execution systems aren't, it's not a solution. What it is, it's a list of capabilities. That's basically starts with the core four. Go ahead and watch the what is MES video. Work order scheduling, OEE, and downtime tracking. And then we just add a bunch of other shit. What if the off the shelf software doesn't have the other shit or the four things that we want? What do we do? The answer is, you're shit out of luck. That's why people end up building. People end up building because of this, and because the limitations in the list of capabilities. So, what does that look like? Okay. So, what does that look like? In the end, what you end up doing is you get a platform, right? So, I'll end up with my platform in the center. In this case, let's say it's ignition. Ignition's an IoT platform that on one side, on one side, it can talk to all the stuff on the plant floor. Okay. Talk to all of our machines. Okay. On the inside, it can do the three things we need it to do. So, we can do data ops. Now, in this case, we wouldn't generally do the data ops. We would put, we would use high byte for this layer. Okay. But it can do the data ops. All right. It can do the info modeling. And it can do the UI and analysis. And then, on the other side, what we have is our standardized visualization of our triangles, our squares, and our circles. And our Xs when we decide to add an X. And our Ys when we decide to add our Ys. That's the technical reason why people build manufacturing execution systems. In order for me to get this, in order for me to get this for my operator, that for my supervisor, that for whoever wants to analyze the reasons why we're not performing, our availability number isn't as high as we want it to be, or our quality number isn't as high as we want it to be, or our performance number isn't as high as we want it to be. Whoever needs to consume the data, analyze the events in order to build that, or in order to build this, where were we to plan in real time? What was our production this hour relative to what it should have been? Where are we trending over the course of our shift? Moreover, this is one of the reasons I love Flow Software, which is an IoT platform. But one of the reasons I love Slow Flow Software and the Unified Analytics Framework, which is coming out from the team at Flow, is that we can take this data here and we can use linear regression to predict the future, midway through a shift, or midway through a month, or midway through a week, or midway through a quarter. In order to do all these things, either you have to buy a piece of software that has the ability to ingest what it is you have on the plant floor and format it for the objects that they've already pre-created, or provide you the capabilities that you're looking for, or you do it yourself. One of the advantages of using an IoT platform, especially one that has an SDK or has third-party partners that develop modules, is that you can buy the IoT platform, you can install a module that does, say, this piece. So, this would be, say, Cepasoft's MES modules, which we don't use. But what Cepasoft's MES module does in this IoT platform is it can consume the data from the machines in the structure that the Cepasoft Analytics Engine needs to do your calculations, and then you still have all the flexibility of the IoT platform to extend the capabilities that Cepasoft's modules can't provide for you. Which is what I just showed you there is actually an example of this architecture. But in order to do this, and what we've been teaching in the core manufacturing, the core MES bootcamp, which started last fall and actually ends this Saturday, and what we'll be doing in the advanced MES bootcamp, is we're teaching you how to actually do that. So, I tweeted this out yesterday. This is the process of consuming raw asset data, whether it's via OPC, flat file, MQTT, or it's manual events from operators. You have line and cell data abstraction. So, what we have to do is we have to take the events from the assets, and we have to format them into specific events with definitions. The four most important ones for the core four are infeed, outfeed, waste, and status. And then we can also add in custom parameters and attributes. From that space, this is actually a namespace, that we then map into our manufacturing execution data and information model. So, that's where we consume events to do specific functions like calculate OEE, like calculate availability, like calculate performance and quality. Okay? And then what we do is we consume that information from those models, and we analyze it in visualizations. This is what we've taught in the core MES bootcamp. We taught from a theoretical level, and then we built it. And then this Saturday, what we're doing is we're revealing all the stuff that we built. What we're going to be doing in the advanced bootcamp, the MES bootcamp, is showing how to build, but we're going to be building extended features. Specifically, the big one will be ERP integration. If you watch the what MES video, what is MES video, one of the things I talked about is if you look at the core four, work order scheduling, OEE, and downtime tracking, the very first one of those functions that gets dropped is scheduling. It's literally the first one that'll get dropped. The second one that gets dropped is work order management. Okay? What we're going to be doing in the advanced MES bootcamp is showing you how to consume work orders from ERP, how to consume a schedule from an external third party application without managing it inside of your MES application. But I can tell you this, I've been doing manufacturing execution systems for a very long time. Okay? Two major observations that I've made. One about the systems integrators that do it, and one about the end users. Okay? The systems integrators who are off-the-shelf people, they generally only work with one piece of off-the-shelf software. Right? They try to master one piece of off-the-shelf software, and they try to find the clients that work best for the capabilities that off-the-shelf piece of software can provide. And they go in knowing the limitations of that software and what it can't do. And what they try to do is just steer the customer towards what it can do. Then you have the integrators who build. And the integrators who build always try to do the same thing. The vast majority. Okay? What they try to do is they try to do it the way the off-the-shelf people do it. They start with a specific list of capabilities, and they'll build some type of edge device that they want to sell to the customer for $1,000 a machine or whatever it is. And all that edge device does is connect to events and turn those events into a shape. And then connect that shape to their shape that they already have in their software. Okay? The best way, the observation about the end user, excuse me, the end user is never satisfied with either of those outcomes. As the end user gets smarter and smarter and smarter during their digital journey, they become less and less satisfied with the limitations of those two approaches. Which is the reason that manufacturers always end up building. Always. And I would say that if you look at the vast majority of manufacturing execution systems we built, we're not going from paper to digital based on an IoT platform, unified namespace, digital strategy, architecture based on edge-driven report by exception and lightweight technology. We're not going from paper to built MES. We're going from off-the-shelf MES to built MES. And those are the technical reasons which I've just laid out as to why it is people end up building. All right. That's my story. I'm going to stick to it. Like, subscribe, click the notification bell, share the video. Thanks for watching. And I will see you in the next one.