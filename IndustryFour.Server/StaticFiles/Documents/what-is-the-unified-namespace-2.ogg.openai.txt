All right, what is the unified namespace? We've gotten this question a million times. I've shot a million videos on this. My team is here in the office. I'm gonna show you guys how it is I answer their questions when they ask me a question like this, all right? So, number one, I want you guys to remember the questions. What is it a software? Where does it live? Make sure you ask me those questions. All right, the unified namespace is really simple, okay? It's not difficult, all right? The thing you need to understand is we need to remember our layers of the automation stack, okay? And we need to remember how we used to integrate. So if you have a question about this six-layer automation stack, you can watch the video link somewhere around here that's way back from three or four years ago on how industrial automation works, okay? But in a nutshell, we have things out on the floor, and those things out on the floor are basically objects, they're processes. So I may have a process that is a triangle out on the floor, and within that triangle, I may have various sensors that we could label one, two, three. I may have another process that is a square, okay? And it may have a process that's, or sensors that's four, one, two. We've introduced a new sensor plus two of the sensors that are on the triangle, okay? What we wanna be able to do is acquire data from our sensors so that we can monitor our automation processes and control them. That's supervisor control and data acquisition. The way that that process has always worked, that acquisition has always happened generally with a piece of software that is between the SCADA layer and the PLC HMI layer that connects and pulls and requests individual data points, four, one, two, one, two, and three. For the third industrial revolution, all of our integration, the acquisition of the data all across our business was done linearly and deterministically. That is, and what is linear and deterministic? I use these terms and I assume everybody knows what I'm talking about, okay? Linear means that it goes from point to another point to another point to another point, okay? As opposed to hub and spoke, okay? Or pub-sub or broker node where it goes to one point where everything gets it, okay? Linear integrations went up the stack, okay? We went from the physical sensor in the field to the PLC, from the PLC to the HMI, from the PLC and the HMI to the SCADA system, okay? And then that's basically where integrations stopped initially. That manufacturing execution system was paper. It wasn't paper by accident. It started out as paper because it was next to impossible to get the digital data that you needed to be able to execute manufacturing. All right, so remember, why are things are the way they are right now? It has to do with the way that we used to do things during the third industrial revolution. Linear integration, deterministic. I only go get the stuff that I know that I want for a very specific reason, okay? The fourth industrial revolution requires that we collect data from all over the business, not just from sensors and equipment on the plant floor to control it and monitor it, but from across the business, from the ERP system so that we can put the bill of materials in the manufacturing execution system, from the CMMS system to the ERP system so that we can know what is the asset ID in the ERP system for the specific asset that we're gonna maintain in the CMMS system. The fourth industrial revolution's about going all through your business and acquiring all the data, not just the stuff that we have determined has value, but all of the data, organizing it and putting it in one place for all consumers in our business to get it, okay? So the unified namespace is a couple of things. Number one, it's the single source of truth for all data and information in your business, okay? It's the single source of truth. Number two, for all this data, we need to structure it and we need to keep it updated. The unified namespace is the structure and the events of your business, the whole business. Number three, it is the hub where all the smart things in the business that have data connect to each other through, all right? And number four, it is the foundation of your digital future, okay? It is the foundation of your digital infrastructure. All of the digital solutions that you build are gonna be built on top of the unified namespace as an extension of the unified namespace. Real quick, we shot videos on how software works. When I build a piece of software that does things, okay? It basically has three components. It has a backend, which is almost always SQL. It has an API layer for me to retrieve the data from the backend so that I can put it in the user interface layer. It also has an API so that I can take stuff from the user interface layer and put it in the backend. Guess what the unified namespace is in software terminology? The unified namespace is this component here. And all the smart software in your business, the UIs, interact through that common infrastructure. Okay, we use MQTT for the API calls and we use the unified namespace as the structure and the events that are in the background, the master data model. Now, people will ask the question, well, why don't I use a data lake or why don't I use this other technology? The answer is because for scalability, for security, and for time to value, short time to value. Okay, all right, so what is the unified namespace? How do I sell the unified namespace? How do I explain it to people? You know, we created a cheat sheet internally actually, I wrote it, that explains to everyone, here's what the unified namespace is and here's how it works and here's what it means for people, okay? And if you were to call one of the engineers here, you would talk to one of our business development people, they're going to be explaining what's on that sheet basically, okay? But the unified namespace, if it's the single source of truth for all data and information, it is the place that all of these layers of the stack communicate to one another through, okay? So if I want to know the value of some data point anywhere in my business, like what is the third element in the bill of materials array for this product code in the ERP system, the unified namespace is the single source of truth for all the smart nodes in the business to go get that data point from. Okay, number two, the structure and the events. So we organize, we have to organize the business somehow. How do I know where to go to get the data point I care about? Does someone have to put it on a piece of paper and say the data point that you want for your manufacturing execution system, which shows machine state in this triangle here, okay? Which shows machine state on that machine, data point one on that machine is machine state. Do I have to tell you, you need to go to triangle.one and at this server to pull for it? Of course not, because that is deterministic. You would have to know where that exists. No, what you do is we create a semantic hierarchy that is semantic, which means that we can follow it like a file share, okay? So we use ISA 95 part two to structure our business. So we structure it enterprise site, area, line, and then cell below, okay? And we add a bunch of different namespaces in here. This is a unified namespace. We take the namespaces from all these functional layers, okay, these business layers, and they have places, many places in here. So for ERP at the site level, which would be like the site ID, we would have a site ID underneath the site that came from the ERP. So that is, it's the structure of the business. And then it's the events. So let's say that this line is that triangle right there. So I would have this line. The name of the line would be that triangle. And underneath that triangle, I would have one, two, and three. Data point one, data point two, data point three. Data point one, because as I've already pointed out, is machine state. We've written a specification that says that data point one in any of our shapes is the state of that machine, that asset. If I create another line, okay? If I create another line, and that line is our square, then I will have data point one, data point two, and data point four. And one will also be our state. So if I'm the manufacturing execution system, I know all I have to do is go to the line level in our semantic hierarchy, and look for the ones in all of our shapes. And that's the state of the machines. So it is the structure and all of the events. The hub is the, it is the, this is the hub through which all the smart things talk to the business, talk to the data. Okay, so we subscribe to the data in our hub, we do stuff with it, and then we publish back information from that data for other things in the business to use. Okay, so it is the hub through which all the smart things talk. Does that mean, does that mean that you don't have any more of this? And the answer is no. But you get rid of most of this. You get rid of most of these linear integrations. And over time, these phase out. And once this, in a very, very short time, we will see a business whose smart things only communicate through a unified namespace with no point-to-point integrations. But during this transitional phase, you're gonna have a combination of some of this red and most of this purple. Okay, and the last thing is, it's the foundation of our digital future. I have a new problem, come up with problem statement. That problem statement starts out as a dashed circle that has no data and it has no information. But by using our digital infrastructure, we can connect this dashed circle to our infrastructure. We can develop, we can consume data, create information, and we can solve our problem, making it whole. That is what a unified namespace is. Over time, we add more and more circles. And this namespace gets bigger and bigger and bigger. That's the UNS. All right, questions that people have. Where does the unified namespace live? Okay, it lives everywhere. It's omniscient, it's omnipresent, okay? We generally use messaging queue transport telemetry to do this, MQTT, okay? Why? Because it's Pub-Sub, it's broker-client, okay? That is, I can publish data into the thing, I can subscribe to all the information and data that I care about, and as new circles come in and they add more data and information, I can see all of it. But here's the beauty. Because of the way that technology is developed, I can put another, this is called a broker, I can put another broker over here, I can connect this broker to this one, and I can say, give me everything. Now a copy of this broker, this broker is an exact copy of that one, okay? When, let's say I wanted to put a broker down here on this production line, okay? And all I want, the broker on this production line, the only stuff it publishes is this stuff. But then I set up a subscription and I say, give me the entire site. So now what I've got are two namespaces. The one, the triangle one that I send up, and the site one that I bring back down. It's everywhere. Okay, what software is it, right? Okay, this could be, so this could be the MQTT transmitter inside an ignition edge. Okay, that's the software you would use there. You'd have ignition plus the MQTT transmitter module to set up these connections. This could be the EMQX broker. This could be HiveMQ, okay? That's the open architecture piece. That's the technology centric piece. We built the infrastructure on a common protocol that has a standard called Spark Plug B, which is open managed by the Eclipse Foundation. But the softwares we are using are irrelevant. They only have to meet our minimum technical requirements, which are, in our case, you have to support MQTT, you got to scale to this level, and you got to support the MQTT Spark Plug B standard managed by Eclipse. What other questions do we have that commonly come up? What if, what about OPC UA in regards to all of this? So OPC UA is wholly appropriate to use in this layer here. Okay, the process control layer. What the OPC Foundation tried to do was try to say, we can get rid of this red line by using OPC. It turns out you can't, okay, for a million reasons. Not the least of which is OPC UA is not a report by exception by default. Therefore, you don't have enough network bandwidth to even handle all the messaging. Number two, it's server client, which means that you're going to be constantly requesting values that haven't updated. And those updates are going to be sent over the wire. 93% of which haven't changed. Don't change once every 60 seconds. Okay, your infrastructure. When people started to try to digitally transform in the beginning, they did not have the network infrastructure to handle all the data that was being passed. So we were really focused on picking a technology that could, where I could literally poll for every data point. Or I could literally have every data point available without polling it. So OPC UA is far too verbose, okay? And only a fraction of the standard has ever been implemented because it's built by a political organization. What software do I need to build the independent space? A software that meets your minimal technical requirements, which is MQTT and Spark Plug B with a engineering user interface. I'll give you the most common example. The most common example is this is a standalone broker. This is the EMQX. We prefer the EMQX broker. It is the most scalable, most cost efficient, and it has 30% more throughput than any other broker on the market, but it's made by the Chinese. Not everybody wants to use it because it's from China. So if you say, fuck the Chinese, we don't want to use your broker, then HiveMQ is the backup. And in small implementations, we'll use MQTT distributor, which is in a CirrusLink module, which runs inside of Ignition. But this could be Mosquito. It could be lots of things, okay? But in general, this is going to be EMQX as the broker up here. This big example here is going to be Ignition, and we're going to build all these circles. We're going to solve all these problems inside the Ignition platform in general, okay? Same thing here. Other than Ignition, what's in some of the other platforms? HiByte, Frameworks, Hulup, Litmus, Sorba AI, or IoT. I mean, there's many, many, many, many, many platforms out there. I mean, I try to only talk about the ones that I generally use, because if I list off a whole list of them, I leave important ones off the list. And because I'm an influencer, people will say, oh, because Walker didn't say that, it must mean something. Well, no, it could mean I just fucking forgot to mention it, right? In general, this is EMQX right here. In general, this is Ignition right here. In general, these circles are being built inside the Ignition platform, okay? On top of this digital foundation, which is all the purple stuff. That is the Unified Name Space. Okay? All right, thanks for watching. Like, subscribe. If you got more questions, put them in the comments down below, and we'll see you in the next one.